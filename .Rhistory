SSe = t(y) %*% y - Beta %*% t(X) %*% X %*% Beta
t(X)
Beta
X = data.frame(1, oslo$nedbor)
X = as.matrix(X)
X
Beta = XtXinv %*% t(X) %*% as.matrix(y)
SSe = t(y) %*% y - Beta %*% t(X) %*% X %*% Beta
X
t(X)
X* t(X)
Beta
X
X %*% Beta
Beta %*% t(X)
X = data.frame(1, oslo$nedbor)
y = data.frame(stavanger$nedbor)
X = as.matrix(data.frame(1, oslo$nedbor))
y = as.matrix(data.frame(stavanger$nedbor))
X.t = as.matrix(t(1, oslo$nedbor))
X.t = as.matrix(t(data.frame(1, oslo$nedbor)))
XtX = X.t %*% X
remove(a, b, s, d, i)
remove(c)
library(matlib)
XtXI = inv(XtX)
remove(XtXinv)
XtX %*% XtXI
Xty = X.t %*% y
Beta = XtXI %*% Xty
y.t = as.matrix(t(as.data.frame(y)))
Beta.t = as.matrix(t(as.data.frame(Beta)))
SSe = (y.t %*% y) - Beta.t %*% X.t %*% X %*% Beta
SSe = SSe[1,1]
t = dgamma(-20:50,3644/2, SSe/2)
t
t = dgamma(0:3645,3644/2, SSe/2)
t
t = dgamma(2000:3645,3644/2, SSe/2)
t
t = dgamma(3630:3645,3644/2, SSe/2)
t
t = dgamma(1400:1600,3644/2, SSe/2)
t
3644/2
SSe/2
t = dgamma(0, 100000,1822, 77167.09)
t = dgamma(0:100000,1822, 77167.09)
t
t[1000:2000]
t[2000:3000]
t[3000:4000]
t[4000:5000]
t[5000:6000]
t[6000:7000]
t[60000:70000]
t[70000:10000]
t[70000:71000]
t[71000:72000]
t[75000:76000]
t[76000:77000]
t[77000:78000]
sigma = sqrt(SSe/3644)
XtX[2,2]
sum(oslo$nedbor)
sum(oslo$nedbor^2)
sum(oslo$nedbor^2) - 3646*mean(oslo$nedbor)
sigma = sqrt(SSe/3644)*(1/110317)
sigma
sigma = sqrt(SSe/3644)*sqrt(1/110317)
sigma
pt.scaled(0:30, 77167.09, Beta[2, 1], sigma)
library(stats)
pt.scaled(0:30, 77167.09, Beta[2, 1], sigma)
dt.scaled(0:30, 77167.09, Beta[2, 1], sigma)
install.packages("stats")
detach("package:stats", unload = TRUE)
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
detach("package:stats", unload = TRUE)
install.packages("stats")
library(stats)
install.packages("metRology")
library(metRology)
dt.scaled(0:30, 77167.09, Beta[2, 1], sigma)
dt.scaled(-20:20, 77167.09, Beta[2, 1], sigma)
dt.scaled(-5:5, 77167.09, Beta[2, 1], sigma)
XtX[2,2]
remove(sigma)
v1 = 1/3644
S1 = SSe
sigma1 = sqrt(SSe/3644)
SSx = 110317
s1 = SSe
sigma1 = sqrt(s1/3644)
remove(S1)
SSe
SSe/2
t = dgamma(x,1822, SSe)
remove(t)
Beta
plot(Beta[1, 1], Beta[2, 1])
plot(Beta[1, 1], Beta[2, 1]*x)
plot(Beta[1, 1], Beta[2, 1]*0:90)
plot(Beta[1, 1], Beta[2, 1]*0:90)
plot(Beta[1, 1], Beta[2, 1]*c(0:90))
x = c(0:90)
plot(x, Beta[1, 1] + Beta[2, 1]*x)
plot(x, Beta[1, 1] + Beta[2, 1]*x, type="l")
Beta
plot(x, Beta[1, 1]*x + Beta[2, 1], type="l")
plot(x, Beta[1, 1] + Beta[2, 1]*x, type="l")
Beta
s1 = SSe
s1
s1/2
sigma1*sqrt(1/SSx)
sigma1
SSx
#Plotting y ~ x, with logarithmic scale
plot(stavanger$nedbor ~ oslo$nedbor, main = "Punkter for nedbør i Oslo og Stavanger", xlab = "Stavanger", ylab = "Oslo", col="blue", log="xy")
mean(stavanger$nedbor)
mean(oslo$nedbor)
#Plotting y ~ x, with logarithmic scale
plot(stavanger$nedbor ~ oslo$nedbor, main = "Punkter for nedbør i Oslo og Stavanger", xlab = "Oslo", ylab = "Stavanger", col="blue", log="xy")
qt.scaled(0.05, 3644, -1)
qt(0.05, 3644, -1)
library(metRology)
qt.scaled(0.05, 3644, -1)
qt.scaled(0.05, 3644, 0, -1)
plot(x, y1, type="l")
y1 = Beta[1, 1] + Beta[2, 1] + qt.scaled(0.05, 3644, 0, -1)*sigma1*sqrt((1/3646) + (1/SSx)*(x - mean(oslo$nedbor))^2)
y2 = Beta[1, 1] + Beta[2, 1] - qt.scaled(0.05, 3644, 0, -1)*sigma1*sqrt((1/3646) + (1/SSx)*(x - mean(oslo$nedbor))^2)
plot(x, y1, type="l")
plot(x, y2, type="l")
#qt.scaled(0.05, 3644, 0, -1)
y1 = Beta[1, 1] + Beta[2, 1] + 1.645272*sigma1*sqrt((1/3646) + (1/SSx)*(x - mean(oslo$nedbor))^2)
y2 = Beta[1, 1] + Beta[2, 1] - 1.645272*sigma1*sqrt((1/3646) + (1/SSx)*(x - mean(oslo$nedbor))^2)
plot(x, y1, type="l")
plot(x, y2, type="l")
#qt.scaled(0.05, 3644, 0, -1)
y1 = Beta[1, 1] + Beta[2, 1]*x + 1.645272*sigma1*sqrt((1/3646) + (1/SSx)*(x - mean(oslo$nedbor))^2)
y2 = Beta[1, 1] + Beta[2, 1]*x - 1.645272*sigma1*sqrt((1/3646) + (1/SSx)*(x - mean(oslo$nedbor))^2)
plot(x, y1, type="l")
plot(x, y2, type = "l")
plot(x, y1, type = "l")
plot(x, y2, type = "l")
install.packages("matplot")
library(matplot)
library(matplot)
library(ggplot2)
#Plotting y ~ x, with logarithmic scale
plot(stavanger$nedbor ~ oslo$nedbor, main = "Punkter for nedbør i Oslo og Stavanger", xlab = "Oslo", ylab = "Stavanger", col="blue", log="xy")
plot(x, Beta[1, 1] + Beta[2, 1]*x, type = "l")
plot(x, Beta[1, 1] + Beta[2, 1]*x, type = "l", main = "Lineær regresjon og intervall estimat for 90%", xlab = "Oslo", ylab = "Stavanger", col = "blue")
line(x, y1, type = "l", col = "red")
line(x, y2, type = "l", col = "red")
line(x, y1, col = "red")
line(x, y2, col = "red")
line(x, y1)
line(x, y2)
lines(x, y1, col = "red")
lines(x, y2, col = "red")
plot(x, Beta[1, 1] + Beta[2, 1]*x, type = "l", main = "Lineær regresjon og intervall estimat for 90%", xlab = "Oslo", ylab = "Stavanger", col = "blue", log = "xy")
plot(x, Beta[1, 1] + Beta[2, 1]*x, type = "l", main = "Lineær regresjon og intervall estimat for 90%", xlab = "Oslo", ylab = "Stavanger", col = "blue", log = "xy")
lines(x, y1, col = "red")
lines(x, y2, col = "red")
plot(x, Beta[1, 1] + Beta[2, 1]*x, type = "l", main = "Lineær regresjon og intervall estimat for 90%", xlab = "Oslo", ylab = "Stavanger", col = "blue")
lines(x, y1, col = "red")
lines(x, y2, col = "red")
line(x, y1)
line(x, y2)
line(x, Beta[1, 1] + Beta[2, 1]*x)
plot(x, Beta[1, 1] + Beta[2, 1]*x, type = "l", main = "Lineær regresjon og intervallestimat for 90%", xlab = "Oslo", ylab = "Stavanger", col = "blue")
lines(x, y1, col = "red")
lines(x, y2, col = "red")
dt.scaled(-20:20, v1, Beta[1,1] + Beta[2, 1]*80, sigma1*sqrt((1/3646) + (1/SSx)*(80-mean(oslo$nedbor))^2))
qt.scaled(0.05, v1, Beta[1,1] + Beta[2, 1]*80, sigma1*sqrt((1/3646) + (1/SSx)*(80-mean(oslo$nedbor))^2))
qt.scaled(0.05, v1, Beta[1,1] + Beta[2, 1]*80, sigma1*sqrt((1/3646) + (1/SSx)*(20-mean(oslo$nedbor))^2))
qt.scaled(0.05, v1, Beta[1,1] + Beta[2, 1]*80, sigma1*sqrt((1/3646) + (1/SSx)*(oslo$nedbor[20]-mean(oslo$nedbor))^2))
qt.scaled(0.05, v1, Beta[1,1] + Beta[2, 1]*20, sigma1*sqrt((1/3646) + (1/SSx)*(20-mean(oslo$nedbor))^2))
line(x, y1)
line(x, y2)
line(x, Beta[1, 1] + Beta[2, 1]*x)
oslo100 = oslo[1:100, ]
stavanger100 = stavenger[1:100]
stavanger100 = stavanger[1:100]
stavanger100 = stavanger[1:100,]
find_correlation(oslo100$nedbor, stavanger$nedbor, 100)
find_correlation(oslo100$nedbor, stavanger100$nedbor, 100)
oslo100 = oslo[100:200, ]
stavanger100 = stavanger[100:200,]
find_correlation(oslo100$nedbor, stavanger100$nedbor, 100)
oslo100 = oslo[200:300, ]
stavanger100 = stavanger[300:300,]
find_correlation(oslo100$nedbor, stavanger100$nedbor, 100)
stavanger100 = stavanger[200:300,]
find_correlation(oslo100$nedbor, stavanger100$nedbor, 100)
oslo100 = oslo[300:400, ]
stavanger100 = stavanger[300:400,]
find_correlation(oslo100$nedbor, stavanger100$nedbor, 100)
oslo100 = oslo[400:500, ]
stavanger100 = stavanger[400:500,]
find_correlation(oslo100$nedbor, stavanger100$nedbor, 100)
oslo100 = oslo[500:600, ]
stavanger100 = stavanger[500:600,]
find_correlation(oslo100$nedbor, stavanger100$nedbor, 100)
oslo100 = oslo[400:500, ]
stavanger100 = stavanger[400:500,]
find_correlation(oslo100$nedbor, stavanger100$nedbor, 100)
clean_row_and_id(oslo100, stavanger100)
Beta100 = inv(as.matrix(t(data.frame(1, oslo100$nedbor))) %*% as.matrix(data.frame(1, oslo100$nedbor))) %*% as.matrix(t(data.frame(1, oslo100$nedbor))) %*% as.matrix(data.frame(stavanger100$nedbor))
library(matlib)
Beta100 = inv(as.matrix(t(data.frame(1, oslo100$nedbor))) %*% as.matrix(data.frame(1, oslo100$nedbor))) %*% as.matrix(t(data.frame(1, oslo100$nedbor))) %*% as.matrix(data.frame(stavanger100$nedbor))
plot(stavanger100@nedbor ~ oslo100$nedbor)
plot(stavanger100$nedbor ~ oslo100$nedbor)
lines(x, Beta100[1, 1] + Beta100[2, 1]*x)
plot(stavanger100$nedbor ~ oslo100$nedbor, log="xy")
lines(x, Beta100[1, 1] + Beta100[2, 1]*x)
plot(stavanger100$nedbor ~ oslo100$nedbor)
lines(x, Beta100[1, 1] + Beta100[2, 1]*x)
View(oslo100)
View(oslo100)
View(stavanger100)
View(stavanger100)
as.matrix(t(as.data.frame(stavanger100$nedbor))) %*% as.matrix(stavanger100$nedbor) - as.matrix(t(as.data.frame(Beta100))) %*% as.matrix(t(data.frame(1, oslo100$nedbor))) %*% as.matrix(data.frame(1, oslo100$nedbor))) %*% Beta100
as.matrix(t(as.data.frame(stavanger100$nedbor))) %*% as.matrix(stavanger100$nedbor) - as.matrix(t(as.data.frame(Beta100))) %*% as.matrix(t(data.frame(1, oslo100$nedbor))) %*% as.matrix(data.frame(1, oslo100$nedbor)) %*% Beta100
as.matrix(t(as.data.frame(stavanger100$nedbor))) %*% as.matrix(stavanger100$nedbor) - as.matrix(t(as.data.frame(Beta100))) %*% as.matrix(t(data.frame(1, oslo100$nedbor))) %*% as.matrix(data.frame(1, oslo100$nedbor)) %*% Beta100[1,1]
(as.matrix(t(as.data.frame(stavanger100$nedbor))) %*% as.matrix(stavanger100$nedbor) - as.matrix(t(as.data.frame(Beta100))) %*% as.matrix(t(data.frame(1, oslo100$nedbor))) %*% as.matrix(data.frame(1, oslo100$nedbor)) %*% Beta100)[1,1]
SSe100=(as.matrix(t(as.data.frame(stavanger100$nedbor))) %*% as.matrix(stavanger100$nedbor) - as.matrix(t(as.data.frame(Beta100))) %*% as.matrix(t(data.frame(1, oslo100$nedbor))) %*% as.matrix(data.frame(1, oslo100$nedbor)) %*% Beta100)[1,1]
SSe100
SSe100 = SSe100[1, 1]
SSe100 = SSe100[1,]
SSe100 = SSe100[,1]
SSe100=(as.matrix(t(as.data.frame(stavanger100$nedbor))) %*% as.matrix(stavanger100$nedbor) - as.matrix(t(as.data.frame(Beta100))) %*% as.matrix(t(data.frame(1, oslo100$nedbor))) %*% as.matrix(data.frame(1, oslo100$nedbor)) %*% Beta100)
SSe100 = SSe100[1,1]
dgamma(-20:20, 99/2, SSe100/2)
dgamma(-10:10, 99/2, SSe100/2)
dgamma(-5:5, 99/2, SSe100/2)
dgamma(-3:3, 99/2, SSe100/2)
dgamma(0:3, 99/2, SSe100/2)
dgamma(1:2, 99/2, SSe100/2)
dgamma(1, 99/2, SSe100/2)
oslo100 = data[2653:3653,]
stavanger100 = data[7199:7299,]
clean_row_and_id(oslo100, stavanger100)
oslo100 = data[3553:3653,]
stavanger100 = data[7199:7299,]
levels(oslo$nedbor) = gsub(",", ".", levels(oslo$nedbor))
data = read.csv("table-2.csv", header = TRUE)
oslo = data[1:3653,]
stavanger = data[3654:7299,]
oslo = oslo[-c(883, 2970:2975),] # trekker fra de dagene som finnes i Oslo-datasettet, men ikke i Stavanger-datasettet
clean_row_and_id = function(x, y){
rownames(x) = 1:nrow(x)
rownames(y) = 1:nrow(y)
x$id = rownames(x)
y$id = rownames(y)
}
clean_row_and_id(oslo, stavanger)
levels(oslo$nedbor) = gsub(",", ".", levels(oslo$nedbor))
levels(stavanger$nedbor) = gsub(",", ".", levels(stavanger$nedbor))
oslo$nedbor = as.numeric(levels(oslo$nedbor)[as.numeric(oslo$nedbor)])
stavanger$nedbor = as.numeric(levels(stavanger$nedbor)[as.numeric(stavanger$nedbor)])
find_correlation = function(x, y, n){
return(((sum((x - mean(x))*(y - mean(y))))*(1/n))/
((sqrt(sum((x - mean(x))^2)/n))*(sqrt(sum((y - mean(y))^2)/n))))
}
korrelasjon = find_correlation(oslo$nedbor, stavanger$nedbor, 3645)
X = as.matrix(data.frame(1, oslo$nedbor))
y = as.matrix(data.frame(stavanger$nedbor))
X.t = as.matrix(t(data.frame(1, oslo$nedbor)))
XtX = X.t %*% X
Xty = X.t %*% y
library(matlib)
XtXI = inv(XtX)
Beta = XtXI %*% Xty
y.t = as.matrix(t(as.data.frame(y)))
Beta.t = as.matrix(t(as.data.frame(Beta)))
SSe = (y.t %*% y) - Beta.t %*% X.t %*% X %*% Beta
SSe = SSe[1,1]
v1 = 3644
s1 = SSe
s1sigma1 = sqrt(s1/3644)
SSx = 110317
t = dgamma(x,1822, SSe/2)
library(metRology)
b = dt.scaled(x, v1, Beta[2, 1], sigma1*sqrt(1/SSx))
yx = dt.scaled(x, v1, Beta[1,1] + Beta[2, 1]*x, sigma1*sqrt((1/3646) + (1/SSx)*(x-mean(oslo$nedbor))^2))
ypluss = dt.scaled(v1, Beta[1,1] + Beta[2, 1]*x, sigma1*sqrt(1 + (1/3646) + (1/SSx)*(x-mean(oslo$nedbor))^2))
#qt.scaled(0.05, 3644, 0, -1)
y1 = Beta[1, 1] + Beta[2, 1]*x + 1.645272*sigma1*sqrt((1/3646) + (1/SSx)*(x - mean(oslo$nedbor))^2)
y2 = Beta[1, 1] + Beta[2, 1]*x - 1.645272*sigma1*sqrt((1/3646) + (1/SSx)*(x - mean(oslo$nedbor))^2)
plot(x, Beta[1, 1] + Beta[2, 1]*x, type = "l", main = "Lineær regresjon og intervallestimat for 90%", xlab = "Oslo", ylab = "Stavanger", col = "blue")
lines(x, y1, col = "red")
lines(x, y2, col = "red")
levels(oslo100$nedbor) = gsub(",", ".", levels(oslo$nedbor))
levels(oslo100$nedbor) = gsub(",", ".", levels(oslo100$nedbor))
levels(stavanger100$nedbor) = gsub(",", ".", levels(stavanger100$nedbor))
oslo100$nedbor = as.numeric(levels(oslo100$nedbor)[as.numeric(oslo100$nedbor)])
stavanger100$nedbor = as.numeric(levels(stavanger100$nedbor)[as.numeric(stavanger100$nedbor)])
korrelasjon100 = find_correlation(oslo100$nedbor, stavanger100$nedbor, 101)
korrelasjon100 = find_correlation(oslo100$nedbor, stavanger100$nedbor, 101)
X100 = as.matrix(data.frame(1, oslo100$nedbor))
y100 = as.matrix(data.frame(stavanger100$nedbor))
X.t100 = as.matrix(t(data.frame(1, oslo100$nedbor)))
XtX100 = X.t100 %*% X100
Xty100 = X.t100 %*% y100
XtXI100 = inv(XtX100)
Beta100 = XtXI100 %*% Xty100
y.t100 = as.matrix(t(as.data.frame(y100)))
Beta.t100 = as.matrix(t(as.data.frame(Beta100)))
SSe100 = (y.t100 %*% y100) - Beta.t100 %*% X.t100 %*% X100 %*% Beta100
SSe100 = SSe100[1,1]
v1100 = 99
s1100 = SSe100
s1sigma1100 = sqrt(s1100/99)
XtX100
SSx100 = 4705.98
1822*2
99/2
#qt.scaled(0.05, 3644, 0, -1)
y1100 = Beta100[1, 1] + Beta100[2, 1]*x + 1.660391156*sigma1100*sqrt((1/101) + (1/SSx100)*(x - mean(oslo100$nedbor))^2)
sigma1100 = sqrt(s1100/99)
SSx100 = 4705.98
#qt.scaled(0.05, 3644, 0, -1)
y1100 = Beta100[1, 1] + Beta100[2, 1]*x + 1.660391156*sigma1100*sqrt((1/101) + (1/SSx100)*(x - mean(oslo100$nedbor))^2)
y2100 = Beta100[1, 1] + Beta100[2, 1]*x - 1.660391156*sigma1100*sqrt((1/101) + (1/SSx100)*(x - mean(oslo100$nedbor))^2)
plot(x, Beta100[1, 1] + Beta100[2, 1]*x, type = "l", main = "Lineær regresjon og intervallestimat for 90%", xlab = "Oslo", ylab = "Stavanger", col = "blue")
lines(x, y1100, col = "red")
lines(x, y2100, col = "red")
line(y1100)
line(y2100)
line(Beta100[1, 1] + Beta100[2, 1]*x)
plot(stavanger100$nedbor ~ oslo100$nedbor, type = "l", main = "Lineær regresjon og intervallestimat for 90%", xlab = "Oslo", ylab = "Stavanger", col = "blue")
plot(stavanger100$nedbor ~ oslo100$nedbor, type = "p", main = "Lineær regresjon og intervallestimat for 90%", xlab = "Oslo", ylab = "Stavanger", col = "blue")
lines(x, Beta100[1, 1] + Beta100[2, 1]*x, col = "green")
lines(x, y1100, col = "red")
lines(x, y2100, col = "red")
plot(x = oslo100$nedbor, y = stavanger100$nedbor, type = "p", main = "Lineær regresjon og intervallestimat for 90%", xlab = "Oslo", ylab = "Stavanger", col = "blue")
lines(x, Beta100[1, 1] + Beta100[2, 1]*x, col = "green")
lines(x, y1100, col = "red")
lines(x, y2100, col = "red")
plot(x = oslo100$nedbor, y = stavanger100$nedbor, type = "p", main = "Lineær regresjon og intervallestimat for 90%",
xlab = "Oslo", ylab = "Stavanger", col = "blue", log="xy")
lines(x, Beta100[1, 1] + Beta100[2, 1]*x, col = "green")
lines(x, y1100, col = "red")
lines(x, y2100, col = "red")
plot(x = oslo100$nedbor, y = stavanger100$nedbor, type = "p", main = "Lineær regresjon og intervallestimat for 90%",
xlab = "Oslo", ylab = "Stavanger", col = "blue")
lines(x, Beta100[1, 1] + Beta100[2, 1]*x, col = "green")
lines(x, y1100, col = "red")
lines(x, y2100, col = "red")
plot(x = oslo100$nedbor, y = stavanger100$nedbor, type = "p", main = "Lineær regresjon og intervallestimat for 90%",
xlab = "Oslo", ylab = "Stavanger", col = "blue", log = "xy")
plot(x = oslo100$nedbor, y = stavanger100$nedbor, type = "p", main = "Lineær regresjon og intervallestimat for 90%",
xlab = "Oslo", ylab = "Stavanger", col = "blue")
plot(x = oslo100$nedbor, y = stavanger100$nedbor, type = "p", main = "Lineær regresjon og intervallestimat for 90%",
xlab = "Oslo", ylab = "Stavanger", col = "blue", log = "xy")
plot(x = oslo100$nedbor, y = stavanger100$nedbor, type = "p", main = "Punkter for lineær regresjon",
xlab = "Oslo", ylab = "Stavanger", col = "blue", log = "xy")
lines(x, Beta100[1, 1] + Beta100[2, 1]*x, col = "green")
lines(x, y1100, col = "red")
lines(x, y2100, col = "red")
plot(x = oslo100$nedbor, y = stavanger100$nedbor, type = "p", main = "Punkter for lineær regresjon",
xlab = "Oslo", ylab = "Stavanger", col = "blue")
lines(x, Beta100[1, 1] + Beta100[2, 1]*x, col = "green")
lines(x, y1100, col = "red")
lines(x, y2100, col = "red")
write.csv(oslo100$nedbor,"C:\Users\Bruker\Documents\2020-var\Statistikk MA-171\Prosjekt\Linear_Regression\oslo100.csv", row.names = FALSE)
write.csv(oslo100$nedbor,"oslo100.csv", row.names = FALSE)
write.csv(stavanger100$nedbor,"stavanger100.csv", row.names = FALSE)
data100 = data.frame(oslo100$nedbor, stavanger100$nedbor)
write.csv(data100)
View(data100)
View(data100)
write.csv(data100,"data100.csv", row.names = FALSE)
#qt.scaled(0.05, 3644, 0, -1)
y1 = Beta[1, 1] + Beta[2, 1]*x + 1.645272*sigma1*sqrt((1/3646) + (1/SSx)*(x - mean(x))^2)
y2 = Beta[1, 1] + Beta[2, 1]*x - 1.645272*sigma1*sqrt((1/3646) + (1/SSx)*(x - mean(x))^2)
plot(x, Beta[1, 1] + Beta[2, 1]*x, type = "l", main = "Lineær regresjon og intervallestimat for 90%", xlab = "Oslo", ylab = "Stavanger", col = "blue")
lines(x, y1, col = "red")
lines(x, y2, col = "red")
plot(x, Beta[1, 1] + Beta[2, 1]*x, type = "l", main = "Lineær regresjon og intervallestimat for 90%", xlab = "Oslo", ylab = "Stavanger", col = "blue")
lines(x, y1, col = "red")
lines(x, y2, col = "red")
line(y1)
line(y2)
#qt.scaled(0.05, 3644, 0, -1)
y1100 = Beta100[1, 1] + Beta100[2, 1]*x + 1.660391156*sigma1100*sqrt((1/101) + (1/SSx100)*(x - mean(x))^2)
y2100 = Beta100[1, 1] + Beta100[2, 1]*x - 1.660391156*sigma1100*sqrt((1/101) + (1/SSx100)*(x - mean(x))^2)
line(y1100)
line(y2100)
#qt.scaled(0.05, 3644, 0, -1)
y1100 = Beta100[1, 1] + Beta100[2, 1]*x + 1.660391156*sigma1100*sqrt((1/101) + (1/SSx100)*(x - mean(x))^2)
y2100 = Beta100[1, 1] + Beta100[2, 1]*x - (1.660391156*sigma1100*sqrt((1/101) + (1/SSx100)*(x - mean(x))^2))
line(y1100)
line(y2100)
sigma1100
SSx100
mean(x)
line(1.66039 * 7.2021sqrt(1 / 101 + 1 / 4705.98 (x - 45)^2))
line(1.66039 * 7.2021*sqrt((1/101) + (1/4705.98) *(x - 45)^2))
line(1.660391156*sigma1100*sqrt((1/101) + (1/SSx100)*(x - mean(x))^2))
qt.scaled(0.05, 99, 0, -1)
plot(x, Beta100[1, 1] + Beta100[2, 1]*x, type = "l", main = "Lineær regresjon og intervallestimat for 90%",
xlab = "Oslo", ylab = "Stavanger", col = "blue")
#lines(x, Beta100[1, 1] + Beta100[2, 1]*x, col = "green")
lines(x, y1100, col = "red")
lines(x, y2100, col = "red")
plot(x, Beta[1, 1] + Beta[2, 1]*x, type = "l", main = "90% intervallestimat for 3646 observasjoner", xlab = "Oslo", ylab = "Stavanger", col = "blue")
lines(x, y1, col = "red")
lines(x, y2, col = "red")
plot(x, Beta100[1, 1] + Beta100[2, 1]*x, type = "l", main = "90% intervallestimat for 101 observasjoner",
xlab = "Oslo", ylab = "Stavanger", col = "blue")
#lines(x, Beta100[1, 1] + Beta100[2, 1]*x, col = "green")
lines(x, y1100, col = "red")
lines(x, y2100, col = "red")
remove(b, t, yx, ypluss)
remove(s1sigma1, s1sigma1100)
plot(x = oslo$nedbor, y = stavanger$nedbor, type = "p", main = "Punkter for lineær regresjon av 3646 observasjone med logaritmiske akser", xlab = "Oslo", ylab = "Stavanger", col = "blue")
plot(x = oslo$nedbor, y = stavanger$nedbor, type = "p", main = "Punkter for lineær regresjon av 3646 observasjone med logaritmiske akser", xlab = "Oslo", ylab = "Stavanger", col = "blue", log = "xy")
plot(x = oslo$nedbor, y = stavanger$nedbor, type = "p", main = "Punkter for lineær regresjon av 3646 observasjoner \n med logaritmiske akser", xlab = "Oslo", ylab = "Stavanger", col = "blue", log = "xy")
plot(x = oslo$nedbor, y = stavanger$nedbor, type = "p", main = "Plott av 3646 observasjoner med logaritmiske akser", xlab = "Oslo", ylab = "Stavanger", col = "blue", log = "xy")
plot(x = oslo100$nedbor, y = stavanger100$nedbor, type = "p", main = "Plott av 101 observasjoner med logaritmiske akser", xlab = "Oslo", ylab = "Stavanger", col = "blue", log = "xy")
data = read.csv("data/table-2.csv", header = TRUE)
summary(lm(stavanger$nedbor ~ oslo$nedbor))
summary(lm(stavanger100$nedbor ~ oslo100$nedbor))
plot(x, Beta[1, 1] + Beta[2, 1]*x, type = "l", main = "90% intervallestimat for 3646 observasjoner", xlab = "Oslo", ylab = "Stavanger", col = "blue")
lines(x, y1, col = "red")
lines(x, y2, col = "red")
Beta[1,1]
Beta[2,1]
x = c(0:90)
summary(lm(stavanger$nedbor ~ oslo$nedbor))
View(Beta)
View(Beta100)
View(Beta100)
plot(x, Beta100[1, 1] + Beta100[2, 1]*x, type = "l", main = "90% intervallestimat for 101 observasjoner",
xlab = "Oslo", ylab = "Stavanger", col = "blue")
plot(x, Beta100[1, 1] + Beta100[2, 1]*x, type = "l", main = "Linære regresjon",
xlab = "Oslo", ylab = "Stavanger", col = "blue")
plot(x, Beta100[1, 1] + Beta100[2, 1]*x, type = "l", main = "Linær regresjon",
xlab = "Oslo", ylab = "Stavanger", col = "blue")
View(Beta)
View(Beta)
plot(x, Beta[2, 1] + Beta[1, 1]*x, type = "l", main = "90% intervallestimat for 3646 observasjoner", xlab = "Oslo", ylab = "Stavanger", col = "blue")
plot(0:35, Beta[2, 1] + Beta[1, 1]*0:35, type = "l", main = "90% intervallestimat for 3646 observasjoner", xlab = "Oslo", ylab = "Stavanger", col = "blue")
plot(x, Beta100[1, 1] + Beta100[2, 1]*x, type = "l", main = "90% intervallestimat for 101 observasjoner",
xlab = "Oslo", ylab = "Stavanger", col = "blue")
#lines(x, Beta100[1, 1] + Beta100[2, 1]*x, col = "green")
lines(x, y1100, col = "red")
lines(x, y2100, col = "red")
plot(x, Beta[1, 1] + Beta[2, 1]*x, type = "l", main = "90% intervallestimat for 3646 observasjoner", xlab = "Oslo", ylab = "Stavanger", col = "blue")
lines(x, y1, col = "red")
lines(x, y2, col = "red")
SSe
XtX
sum((oslo$nedbor - mean(oslo$nedbor))^2)
sum((oslo$nedbor - mean(oslo$nedbor)))^2
SSx = sum((oslo$nedbor - mean(oslo$nedbor))^2)
SSx100 = sum((oslo100$nedbor - mean(oslo100$nedbor))^2)
X.t
XtX
XtX %*% XtXI
dt.scaled(1:5, v1, Beta[2, 1], sigma1*sqrt(1/SSx))
library(metRology)
dt.scaled(0:5, v1, Beta[2, 1], sigma1*sqrt(1/SSx))
test = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)
dt.scaled(test, v1, Beta[2, 1], sigma1*sqrt(1/SSx))
plot(test, dt.scaled(test, v1, Beta[2, 1], sigma1*sqrt(1/SSx)))
plot(test, dt.scaled(test, v1, Beta[2, 1], sigma1*sqrt(1/SSx)), type = "l")
plot(test, dt.scaled(test, v1, Beta[2, 1], sigma1*sqrt(1/SSx)), type = "h")
plot(test, dt.scaled(test, v1, Beta[2, 1], sigma1*sqrt(1/SSx)), type = "h", col = "blue")
test = c()
for (i in 0:100) {
test = append(test, i/100)
}
i
for (i in 0:100) {
append(test, i/100)
}
for (i in 0:100) {
append(test, (i/100)
}
for (i in 0:100) {
append(test, (i/100)
}
for (i in 0:100) {
test = append(test, (i/100)
}
for (i in 0:100) {
test = (i/100)
}
100/100
for (i in 0:100) {
test = (numeric(i)/100)
}
remove(i, test)
test = c(0:100)
test/100
plot(test, dt.scaled(test, v1, Beta[2, 1], sigma1*sqrt(1/SSx)), type = "h", col = "blue")
test = test/100
plot(test, dt.scaled(test, v1, Beta[2, 1], sigma1*sqrt(1/SSx)), type = "h", col = "blue")
test = c(20:50)
test = test/100
plot(test, dt.scaled(test, v1, Beta[2, 1], sigma1*sqrt(1/SSx)), type = "h", col = "blue")
plot(test, dt.scaled(test, v1, Beta[2, 1], sigma1*sqrt(1/SSx)), main = "t-fordeling for stigningstallet b", ylab = "", xlab = "", type = "h", col = "blue")
bx = test
remove(test)
